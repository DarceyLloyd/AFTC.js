<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>darcey@aftc.io</title>
    <link rel="stylesheet" href="https://rawgit.com/DarceyLloyd/AFTC.css/master/dist/aftc.min.css">
    <link rel="stylesheet" href="../link_files/codepen.css">

    <!-- <script src="../dist/aftc.new.js"></script> -->
    <script src="../src2/aftc.js"></script>
    <script src="../src2/core/events.js"></script>
    <script src="../src2/core/is.js"></script>
    <script src="../src2/core/detection.js"></script>
    <script src="../src2/core/dom.js"></script>
    <script src="../src2/core/audio.js"></script>
    <script src="../src2/AFTC/AFTC.Audio.js"></script>
    <script>




        // I will illustrate 2 methods of doing this

        // Method 1
        // This will create a new audio object each time you click button 1,
        // this audio object should be garbage collected by JS when it can automatically

        // Method 2
        // This will create a AFTC.Sound instance, which you can use to play a
        // specified sound and re-use the AFTC.Sound instance to play the sound again
        // without creating a new AFTC.Sound instance or Audio object/instance.

        // AFTC.Sound usage
        // url : string : A path to an mp3 file somewhere
        // volume : float : A value from 0 to 1 (0.5 is 50% volume)
        // loop : int : A value from -1 to 9999999 (-1 to loop forever, 0 play once, or leave out default is 0)
        // onComplete: function : The function to run when sound playback has complete

        // NOTE: It is recommended that you use Method 2


        // Method 1
        function playSoundMethod1CompleteHandler() {
            log("Method 1 sound playback complete!");
        }

        function playsSoundUsingMethod1() {
            log("playsSoundUsingMethod1()");
            playSound(
                "https://dev.aftc.io/assets/sounds/beats/beat_01.mp3", // url
                0.5, // vol
                false, // loop
                playSoundMethod1CompleteHandler // onComplete
            );
        }
        // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -




        // Method 2
        // Setup variables on global scope not in onReady / ready scope
        var sound2;
        var sound3;

        // Create a function to wrap everything into
        function playsSoundUsingMethod2() {
            log("playsSoundUsingMethod2()");
            sound2.play();
        }
        // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

        // Method 2 on sound complete function handler
        function playSoundMethod2CompleteHandler() {
            log("Method 2 sound playback complete!");
        }
        // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -



        // Only run when page/dom is ready
        onReady(function () {
            // page/dom is ready

            logTo("debug5"); // I want to log to div id debug5 also!
            cls(); // Clear console & html logTo element


            // Method 1
            var btn1 = getElementById("btn1");
            // btn1.addEventListener("click", playsSoundUsingMethod1, false); // Native JS Way calling a function (cleaner)
            // or
            // All in 1, messier but everything in 1 location
            btn1.addEventListener("click", function () {
                log("playsSoundUsingMethod1()");
                playSound(
                    "https://dev.aftc.io/assets/sounds/beats/beat_01.mp3", // url
                    0.5, // vol
                    false, // loop
                    playSoundMethod1CompleteHandler // onComplete
                );
            }, false); // Native JS Way calling a function (cleaner)
            // or
            // addEvent(btn1,"click",playsSoundUsingMethod1); // The AFTC.JS Way
            // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -




            // Method 2
            // Create instance of AFTC.Sound in the var sound2
            sound2 = new AFTC.Audio({
                url: [
                    "https://dev.aftc.io/assets/sounds/beats/beat_01.wav",
                    "https://dev.aftc.io/assets/sounds/beats/beat_01.ogg",
                    "https://dev.aftc.io/assets/sounds/beats/beat_01.mp3"
                ],
                //url: "https://dev.aftc.io/assets/sounds/beats/beat_01.mp3", // url can be a single file (string) also, best to use mp3 for max compatibility
                volume: 0.5,
                repeat: 1,
                onComplete: playSoundMethod2CompleteHandler
            });
            // Setup button click use
            var btn2 = getElementById("btn2");
            btn2.addEventListener("click", playsSoundUsingMethod2, false); // Native JS way
            // addEvent(btn2,"click",playsSoundUsingMethod2); // The AFTC.JS Way
            // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -




            // Method 2 Looped
            // NOTES ON LOOPING
            /*
            1. You will get better results if you supply an array of audio formats wav, ogg and mp3
            2. If you want to offset the loop, detect the browser and set the offsetLoopBy value unique for each
            3. If you want to loop forever use repeat:-1 (NOTE Repeat doesn't work on Edge if you don't use an array of urls (Edge BUG))
            */
            // Create instance of AFTC.Sound in the var sound2
            sound3 = new AFTC.Audio({
                url: [
                    "https://dev.aftc.io/assets/sounds/beats/beat_01.wav",
                    "https://dev.aftc.io/assets/sounds/beats/beat_01.ogg",
                    "https://dev.aftc.io/assets/sounds/beats/beat_01.mp3"
                ],
                volume: 0.5,
                repeat: 2,
                offsetLoopBy: 0.09,
                onComplete: playSoundMethod2CompleteHandler
            });

            // Setup button click use
            var btn3 = getElementById("btn3");
            btn3.addEventListener("click", function () {
                sound3.play();
            }, false);

            var btn4 = getElementById("btn4");
            btn4.addEventListener("click", function () {
                sound3.stop();
            }, false);

            var btn5 = getElementById("btn5");
            btn5.addEventListener("click", function () {
                sound3.resume();
            }, false);
            // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


        });
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    </script>
</head>

<body>
    <h4>Title:</h4>
    <div id="container1" class="box padding-10">
        <button id="btn1">Play method 1</button>
        <hr>
        <button id="btn2">Play method 2</button>
        <hr>
        <button id="btn3">Play method 2 Looped</button>
        <button id="btn4">Pause method 2 Looped</button>
        <button id="btn5">Resume method 2 Looped</button>
    </div>


    <h3>Debug (see conseole for more details):</h3>

    <div id="container1" class="flex-row box">
        <div id="debug1" class="flex-4-col box">debug1</div>
        <div id="debug2" class="flex-4-col box">debug2</div>
        <div id="debug3" class="flex-4-col box">debug3</div>
        <div id="debug4" class="flex-4-col box">debug4</div>
    </div>
    <br>
    <div id="debug5" class="box"></div>

</body>

</html>